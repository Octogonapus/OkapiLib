/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
#include "okapi/api/control/async/asyncMotionProfileController.hpp"
#include "test/tests/api/implMocks.hpp"
#include <gtest/gtest.h>

using namespace okapi;

class MockAsyncMotionProfileController : public AsyncMotionProfileController {
  public:
  using AsyncMotionProfileController::AsyncMotionProfileController;
  using AsyncMotionProfileController::convertLinearToRotational;
  using AsyncMotionProfileController::internalLoadPath;
  using AsyncMotionProfileController::internalLoadPathfinderPath;
  using AsyncMotionProfileController::internalStorePath;
  using AsyncMotionProfileController::makeFilePath;

  void executeSinglePath(const std::vector<squiggles::ProfilePoint> &path, std::unique_ptr<AbstractRate> rate) override {
    executeSinglePathCalled = true;
    AsyncMotionProfileController::executeSinglePath(std::move(path), std::move(rate));
  }

  std::vector<squiggles::ProfilePoint> &getPathData(std::string ipathId) {
    return paths.at(ipathId);
  }

  bool executeSinglePathCalled{false};
};

class AsyncMotionProfileControllerTest : public ::testing::Test {
  protected:
  void SetUp() override {
    squigglesPathFile = std::stringstream(squigglesFileBuf);
    leftPathFile = std::stringstream(left);
    rightPathFile = std::stringstream(right);

    leftMotor = std::make_shared<MockMotor>();
    rightMotor = std::make_shared<MockMotor>();

    model = new SkidSteerModel(leftMotor,
                               rightMotor,
                               leftMotor->getEncoder(),
                               rightMotor->getEncoder(),
                               100,
                               v5MotorMaxVoltage);

    controller = new MockAsyncMotionProfileController(createTimeUtil(),
                                                      {1.0, 2.0, 10.0},
                                                      std::shared_ptr<SkidSteerModel>(model),
                                                      {{4_in, 10.5_in}, quadEncoderTPR},
                                                      AbstractMotor::gearset::green * (1.0 / 2));
    controller->startThread();
  }

  void TearDown() override {
    delete controller;
  }

  std::shared_ptr<MockMotor> leftMotor;
  std::shared_ptr<MockMotor> rightMotor;
  SkidSteerModel *model;
  MockAsyncMotionProfileController *controller;

  std::stringstream squigglesPathFile;
  std::stringstream leftPathFile;
  std::stringstream rightPathFile;
  std::string squigglesFileBuf;
  const std::string left = "dt,x,y,position,velocity,acceleration,jerk,heading\n"
  "0.010000,-0.000266,0.133350,0.000005,0.001000,0.100000,10.000000,0.001992\n"
  "0.010000,-0.000260,0.133350,0.000011,0.000585,-0.041495,-14.149476,0.001948\n"
  "0.010000,-0.000247,0.133350,0.000024,0.001316,0.073118,11.461235,0.001849\n"
  "0.010000,-0.000223,0.133350,0.000047,0.002339,0.102326,2.920799,0.001674\n"
  "0.010000,-0.000187,0.133350,0.000084,0.003654,0.131474,2.914806,0.001400\n"
  "0.010000,-0.000134,0.133350,0.000137,0.005259,0.160524,2.904986,0.001006\n"
  "0.010000,-0.000063,0.133350,0.000208,0.007154,0.189427,2.890372,0.000469\n"
  "0.010000,0.000136,0.133350,0.000407,0.019895,1.274126,108.469850,6.282954\n"
  "0.010000,0.000659,0.133350,0.000930,0.052301,3.240553,196.642682,6.282069\n"
  "0.010000,0.001305,0.133349,0.001576,0.064547,1.224634,-201.591806,6.280979\n"
  "0.010000,0.002086,0.133346,0.002356,0.078070,1.352267,12.763263,6.279661\n"
  "0.010000,0.003014,0.133342,0.003285,0.092863,1.479366,12.709840,6.278096\n"
  "0.010000,0.004103,0.133336,0.004374,0.108921,1.605820,12.645425,6.276265\n"
  "0.010000,0.005366,0.133326,0.005636,0.126236,1.731491,12.567094,6.274148\n"
  "0.010000,0.006814,0.133311,0.007084,0.144799,1.856261,12.477061,6.271726\n"
  "0.010000,0.008459,0.133290,0.008730,0.164598,1.979945,12.368398,6.268981\n"
  "0.010000,0.010315,0.133261,0.010587,0.185623,2.102419,12.247353,6.265897\n"
  "0.010000,0.012394,0.133221,0.012665,0.207857,2.223485,12.106642,6.262458\n"
  "0.010000,0.014706,0.133169,0.014978,0.231287,2.342985,11.949991,6.258650\n"
  "0.010000,0.017264,0.133101,0.017537,0.255894,2.460655,11.766955,6.254458\n"
  "0.010000,0.020073,0.133013,0.020347,0.281019,2.512508,5.185334,6.249882\n"
  "0.010000,0.023131,0.132904,0.023407,0.306006,2.498752,-1.375591,6.244932\n"
  "0.010000,0.026437,0.132769,0.026716,0.330845,2.483850,-1.490200,6.239620\n"
  "0.010000,0.029988,0.132604,0.030271,0.355519,2.467453,-1.639665,6.233956\n"
  "0.010000,0.033783,0.132405,0.034071,0.380016,2.449699,-1.775409,6.227956\n"
  "0.010000,0.037819,0.132169,0.038114,0.404319,2.430233,-1.946646,6.221633\n"
  "0.010000,0.042094,0.131892,0.042398,0.428418,2.409954,-2.027906,6.215002\n"
  "0.010000,0.046606,0.131568,0.046921,0.452295,2.387679,-2.227529,6.208081\n"
  "0.010000,0.051350,0.131194,0.051681,0.475937,2.364156,-2.352294,6.200886\n"
  "0.010000,0.056325,0.130764,0.056674,0.499332,2.339495,-2.466038,6.193437\n"
  "0.010000,0.061527,0.130276,0.061899,0.522468,2.313620,-2.587476,6.185753\n"
  "0.010000,0.066952,0.129724,0.067352,0.545326,2.285843,-2.777730,6.177854\n"
  "0.010000,0.072597,0.129104,0.073031,0.567900,2.257386,-2.845747,6.169763\n"
  "0.010000,0.078458,0.128412,0.078933,0.590176,2.227622,-2.976335,6.161500\n"
  "0.010000,0.084531,0.127643,0.085054,0.612142,2.196593,-3.102922,6.153091\n"
  "0.010000,0.090812,0.126794,0.091392,0.633795,2.165268,-3.132561,6.144557\n"
  "0.010000,0.097296,0.125861,0.097943,0.655118,2.132284,-3.298344,6.135924\n"
  "0.010000,0.103980,0.124840,0.104704,0.676103,2.098549,-3.373466,6.127217\n"
  "0.010000,0.110858,0.123727,0.111672,0.696748,2.064445,-3.410451,6.118462\n"
  "0.010000,0.117926,0.122520,0.118842,0.717049,2.030113,-3.433235,6.109684\n"
  "0.010000,0.125180,0.121216,0.126212,0.736993,1.994456,-3.565643,6.100911\n"
  "0.010000,0.132614,0.119812,0.133778,0.756585,1.959204,-3.525232,6.092168\n"
  "0.010000,0.140225,0.118305,0.141536,0.775817,1.923184,-3.601945,6.083482\n"
  "0.010000,0.148007,0.116695,0.149483,0.794691,1.887331,-3.585298,6.074881\n"
  "0.010000,0.155956,0.114980,0.157615,0.813203,1.851232,-3.609971,6.066392\n"
  "0.010000,0.164067,0.113157,0.165929,0.831354,1.815127,-3.610478,6.058041\n"
  "0.010000,0.172336,0.111227,0.174420,0.849144,1.779020,-3.610718,6.049856\n"
  "0.010000,0.180759,0.109190,0.183086,0.866579,1.743449,-3.557115,6.041864\n"
  "0.010000,0.189331,0.107044,0.191923,0.883655,1.707567,-3.588156,6.034091\n"
  "0.010000,0.198049,0.104792,0.200926,0.900372,1.671746,-3.582057,6.026563\n"
  "0.010000,0.206902,0.102434,0.210088,0.916183,1.581120,-9.062634,6.019313\n"
  "0.010000,0.215877,0.099975,0.219394,0.930544,1.436069,-14.505069,6.012373\n"
  "0.010000,0.224959,0.097421,0.228828,0.943486,1.294190,-14.187920,6.005775\n"
  "0.010000,0.234136,0.094777,0.238379,0.955042,1.155619,-13.857090,5.999547\n"
  "0.010000,0.243395,0.092048,0.248031,0.965244,1.020206,-13.541379,5.993717\n"
  "0.010000,0.252723,0.089242,0.257772,0.974122,0.887777,-13.242892,5.988309\n"
  "0.010000,0.262109,0.086365,0.267589,0.981694,0.757255,-13.052168,5.983344\n"
  "0.010000,0.271542,0.083425,0.277469,0.988002,0.630770,-12.648530,5.978845\n"
  "0.010000,0.281010,0.080430,0.287400,0.993062,0.505962,-12.480801,5.974828\n"
  "0.010000,0.290503,0.077387,0.297369,0.996898,0.383610,-12.235210,5.971311\n"
  "0.010000,0.300012,0.074306,0.307364,0.999535,0.263730,-11.987915,5.968309\n"
  "0.010000,0.309526,0.071193,0.317374,1.000994,0.145919,-11.781150,5.965835\n"
  "0.010000,0.319035,0.068059,0.327387,1.001294,0.029968,-11.595125,5.963900\n"
  "0.010000,0.328532,0.064912,0.337392,1.000454,-0.083966,-11.393333,5.962517\n"
  "0.010000,0.338006,0.061760,0.347377,0.998492,-0.196196,-11.223065,5.961692\n"
  "0.010000,0.347450,0.058613,0.357331,0.995425,-0.306772,-11.057542,5.961436\n"
  "0.010000,0.356854,0.055480,0.367244,0.991267,-0.415711,-10.893968,5.961753\n"
  "0.010000,0.366211,0.052368,0.377104,0.986037,-0.523027,-10.731512,5.962650\n"
  "0.010000,0.375512,0.049288,0.386901,0.979749,-0.628857,-10.583017,5.964131\n"
  "0.010000,0.384748,0.046247,0.396626,0.972420,-0.732883,-10.402639,5.966200\n"
  "0.010000,0.393917,0.043252,0.406271,0.964545,-0.787500,-5.461706,5.968858\n"
  "0.010000,0.403019,0.040309,0.415837,0.956602,-0.794262,-0.676210,5.972113\n"
  "0.010000,0.412055,0.037422,0.425323,0.948580,-0.802262,-0.800017,5.975969\n"
  "0.010000,0.421025,0.034598,0.434728,0.940458,-0.812197,-0.993450,5.980434\n"
  "0.010000,0.429930,0.031840,0.444050,0.932231,-0.822676,-1.047869,5.985516\n"
  "0.010000,0.438770,0.029155,0.453289,0.923877,-0.835425,-1.274899,5.991224\n"
  "0.010000,0.447545,0.026548,0.462443,0.915391,-0.848512,-1.308735,5.997569\n"
  "0.010000,0.456254,0.024023,0.471510,0.906756,-0.863526,-1.501441,6.004561\n"
  "0.010000,0.464897,0.021586,0.480490,0.897968,-0.878862,-1.533561,6.012213\n"
  "0.010000,0.473472,0.019241,0.489380,0.889008,-0.895927,-1.706538,6.020536\n"
  "0.010000,0.481979,0.016995,0.498179,0.879881,-0.912728,-1.680028,6.029543\n"
  "0.010000,0.490417,0.014850,0.506884,0.870568,-0.931346,-1.861875,6.039249\n"
  "0.010000,0.498783,0.012814,0.515495,0.861077,-0.949093,-1.774702,6.049667\n"
  "0.010000,0.507077,0.010889,0.524009,0.851398,-0.967818,-1.872482,6.060810\n"
  "0.010000,0.515296,0.009081,0.532424,0.841537,-0.986159,-1.834061,6.072693\n"
  "0.010000,0.523438,0.007395,0.540739,0.831504,-1.003290,-1.713151,6.085329\n"
  "0.010000,0.531501,0.005834,0.548952,0.821301,-1.020251,-1.696080,6.098729\n"
  "0.010000,0.539483,0.004402,0.557062,0.810946,-1.035503,-1.525206,6.112906\n"
  "0.010000,0.547382,0.003104,0.565067,0.800460,-1.048658,-1.315514,6.127868\n"
  "0.010000,0.555195,0.001943,0.572965,0.789869,-1.059080,-1.042116,6.143626\n"
  "0.010000,0.562920,0.000922,0.580757,0.779203,-1.066648,-0.756892,6.160183\n"
  "0.010000,0.570554,0.000045,0.588442,0.768500,-1.070289,-0.364098,6.177542\n"
  "0.010000,0.578097,-0.000686,0.596020,0.757807,-1.069226,0.106312,6.195704\n"
  "0.010000,0.585546,-0.001269,0.603492,0.747179,-1.062819,0.640738,6.214662\n"
  "0.010000,0.592900,-0.001701,0.610859,0.736676,-1.050317,1.250150,6.234408\n"
  "0.010000,0.600158,-0.001982,0.618123,0.726366,-1.030993,1.932405,6.254927\n"
  "0.010000,0.607320,-0.002109,0.625286,0.716324,-1.004170,2.682323,6.276199\n"
  "0.010000,0.614384,-0.002081,0.632349,0.706324,-0.999992,0.417812,0.015003\n"
  "0.010000,0.621342,-0.001898,0.639310,0.696121,-1.020322,-2.033035,0.037654\n"
  "0.010000,0.628192,-0.001561,0.646168,0.685790,-1.033124,-1.280120,0.060901\n"
  "0.010000,0.634929,-0.001070,0.652923,0.675447,-1.034342,-0.121815,0.084671\n"
  "0.010000,0.641550,-0.000428,0.659575,0.665196,-1.025046,0.929528,0.108881\n"
  "0.010000,0.648053,0.000364,0.666126,0.655130,-1.006563,1.848336,0.133443\n"
  "0.010000,0.654438,0.001301,0.672579,0.645318,-0.981290,2.527273,0.158263\n"
  "0.010000,0.660703,0.002381,0.678937,0.635819,-0.949907,3.138314,0.183242\n"
  "0.010000,0.666850,0.003600,0.685204,0.626652,-0.916615,3.329197,0.208280\n"
  "0.010000,0.672879,0.004953,0.691382,0.617835,-0.881693,3.492215,0.233277\n"
  "0.010000,0.678789,0.006435,0.697476,0.609342,-0.849353,3.234004,0.258132\n"
  "0.010000,0.684582,0.008041,0.703487,0.601132,-0.820944,2.840907,0.282750\n"
  "0.010000,0.690257,0.009765,0.709418,0.593148,-0.798481,2.246346,0.307039\n"
  "0.010000,0.695815,0.011600,0.715271,0.585290,-0.785776,1.270481,0.330914\n"
  "0.010000,0.701254,0.013540,0.721046,0.577490,-0.779989,0.578650,0.354295\n"
  "0.010000,0.706574,0.015578,0.726742,0.569628,-0.786247,-0.625748,0.377114\n"
  "0.010000,0.711772,0.017704,0.732358,0.561598,-0.802965,-1.671802,0.399307\n"
  "0.010000,0.716846,0.019909,0.737891,0.553267,-0.833119,-3.015458,0.420821\n"
  "0.010000,0.721793,0.022186,0.743337,0.544555,-0.871138,-3.801843,0.441611\n"
  "0.010000,0.726609,0.024522,0.748690,0.535327,-0.922799,-5.166144,0.461640\n"
  "0.010000,0.731294,0.026910,0.753948,0.525793,-0.953469,-3.067031,0.480889\n"
  "0.010000,0.735848,0.029340,0.759110,0.516187,-0.960569,-0.709956,0.499358\n"
  "0.010000,0.740273,0.031804,0.764175,0.506512,-0.967514,-0.694514,0.517053\n"
  "0.010000,0.744570,0.034296,0.769142,0.496696,-0.981624,-1.411008,0.533984\n"
  "0.010000,0.748739,0.036808,0.774009,0.486716,-0.997937,-1.631300,0.550166\n"
  "0.010000,0.752781,0.039330,0.778774,0.476495,-1.022128,-2.419123,0.565611\n"
  "0.010000,0.756697,0.041857,0.783435,0.466065,-1.042970,-2.084115,0.580341\n"
  "0.010000,0.760488,0.044381,0.787988,0.455372,-1.069299,-2.632900,0.594372\n"
  "0.010000,0.764153,0.046894,0.792432,0.444419,-1.095353,-2.605472,0.607726\n"
  "0.010000,0.767693,0.049390,0.796764,0.433152,-1.126629,-3.127557,0.620423\n"
  "0.010000,0.771109,0.051862,0.800980,0.421640,-1.151219,-2.459038,0.632484\n"
  "0.010000,0.774401,0.054304,0.805079,0.409838,-1.180204,-2.898519,0.643931\n"
  "0.010000,0.777569,0.056709,0.809056,0.397764,-1.207453,-2.724836,0.654785\n"
  "0.010000,0.780613,0.059072,0.812910,0.385395,-1.236859,-2.940603,0.665064\n"
  "0.010000,0.783536,0.061386,0.816638,0.372796,-1.259935,-2.307612,0.674791\n"
  "0.010000,0.786335,0.063648,0.820237,0.359895,-1.290087,-3.015180,0.683984\n"
  "0.010000,0.789014,0.065851,0.823705,0.346782,-1.311313,-2.122609,0.692661\n"
  "0.010000,0.791570,0.067990,0.827039,0.333395,-1.338712,-2.739946,0.700840\n"
  "0.010000,0.794007,0.070062,0.830237,0.319824,-1.357104,-1.839162,0.708538\n"
  "0.010000,0.796323,0.072062,0.833297,0.306011,-1.381221,-2.411712,0.715772\n"
  "0.010000,0.798520,0.073986,0.836217,0.292013,-1.399816,-1.859463,0.722557\n"
  "0.010000,0.800598,0.075829,0.838996,0.277810,-1.420357,-2.054137,0.728907\n"
  "0.010000,0.802558,0.077590,0.841630,0.263430,-1.438001,-1.764384,0.734835\n"
  "0.010000,0.804400,0.079264,0.844119,0.248902,-1.452715,-1.471446,0.740354\n"
  "0.010000,0.806125,0.080848,0.846461,0.234166,-1.473633,-2.091728,0.745476\n"
  "0.010000,0.807733,0.082339,0.848654,0.219342,-1.482450,-0.881724,0.750212\n"
  "0.010000,0.809225,0.083736,0.850698,0.204358,-1.498381,-1.593148,0.754571\n"
  "0.010000,0.810601,0.085035,0.852590,0.189241,-1.511657,-1.327589,0.758564\n"
  "0.010000,0.811862,0.086234,0.854330,0.174018,-1.522276,-1.061863,0.762197\n"
  "0.010000,0.813008,0.087332,0.855917,0.158716,-1.530248,-0.797210,0.765480\n"
  "0.010000,0.814042,0.088329,0.857354,0.143625,-1.509091,2.115752,0.768426\n"
  "0.010000,0.814970,0.089228,0.858646,0.129237,-1.438836,7.025461,0.771057\n"
  "0.010000,0.815798,0.090034,0.859801,0.115535,-1.370201,6.863530,0.773393\n"
  "0.010000,0.816531,0.090752,0.860827,0.102566,-1.296911,7.328988,0.775454\n"
  "0.010000,0.817176,0.091385,0.861730,0.090348,-1.221775,7.513548,0.777259\n"
  "0.010000,0.817737,0.091938,0.862519,0.078863,-1.148502,7.327283,0.778828\n"
  "0.010000,0.818222,0.092417,0.863201,0.068164,-1.069868,7.863452,0.780178\n"
  "0.010000,0.818636,0.092827,0.863783,0.058246,-0.991781,7.808717,0.781328\n"
  "0.010000,0.818984,0.093173,0.864273,0.049031,-0.921514,7.026661,0.782293\n"
  "0.010000,0.819272,0.093459,0.864680,0.040671,-0.836002,8.551193,0.783092\n"
  "0.010000,0.819506,0.093693,0.865011,0.033044,-0.762684,7.331857,0.783739\n"
  "0.010000,0.819692,0.093878,0.865273,0.026207,-0.683784,7.890004,0.784252\n"
  "0.010000,0.819835,0.094020,0.865474,0.020177,-0.602996,8.078785,0.784646\n"
  "0.010000,0.819940,0.094126,0.865624,0.014929,-0.524731,7.826502,0.784938\n"
  "0.010000,0.820014,0.094200,0.865728,0.010469,-0.446036,7.869460,0.785142\n"
  "0.010000,0.820062,0.094248,0.865796,0.006799,-0.367030,7.900559,0.785274\n"
  "0.010000,0.820090,0.094276,0.865836,0.003920,-0.287813,7.921709,0.785351\n"
  "0.010000,0.820103,0.094288,0.865854,0.001836,-0.208465,7.934837,0.785387\n"
  "0.010000,0.820107,0.094292,0.865859,0.000545,-0.129046,7.941882,0.785397\n"
  "0.010000,0.820107,0.094293,0.865860,0.000049,-0.049598,7.944788,0.785398\n"
  "0.010000,0.820107,0.094293,0.865860,0.000000,-0.004936,4.466274,0.785398\n";

  const std::string right = "dt,x,y,position,velocity,acceleration,jerk,heading\n"
  "0.010000,0.000266,-0.133350,0.000005,0.001000,0.100000,10.000000,0.001992\n"
  "0.010000,0.000260,-0.133350,0.000011,0.000585,-0.041495,-14.149476,0.001948\n"
  "0.010000,0.000247,-0.133350,0.000024,0.001316,0.073118,11.461235,0.001849\n"
  "0.010000,0.000223,-0.133350,0.000047,0.002339,0.102326,2.920799,0.001674\n"
  "0.010000,0.000187,-0.133350,0.000084,0.003654,0.131474,2.914806,0.001400\n"
  "0.010000,0.000134,-0.133350,0.000137,0.005259,0.160524,2.904986,0.001006\n"
  "0.010000,0.000063,-0.133350,0.000208,0.007154,0.189427,2.890372,0.000469\n"
  "0.010000,0.000075,-0.133350,0.000220,0.001225,-0.592873,-78.230034,6.282954\n"
  "0.010000,0.000362,-0.133350,0.000507,0.028699,2.747443,334.031622,6.282069\n"
  "0.010000,0.000716,-0.133351,0.000862,0.035453,0.675368,-207.207517,6.280979\n"
  "0.010000,0.001146,-0.133352,0.001291,0.042930,0.747726,7.235828,6.279661\n"
  "0.010000,0.001657,-0.133354,0.001803,0.051137,0.820627,7.290041,6.278096\n"
  "0.010000,0.002258,-0.133358,0.002403,0.060078,0.894182,7.355525,6.276265\n"
  "0.010000,0.002955,-0.133363,0.003101,0.069764,0.968507,7.432551,6.274148\n"
  "0.010000,0.003757,-0.133372,0.003903,0.080201,1.043751,7.524315,6.271726\n"
  "0.010000,0.004671,-0.133383,0.004817,0.091401,1.120041,7.629050,6.268981\n"
  "0.010000,0.005705,-0.133400,0.005851,0.103377,1.197565,7.752373,6.265897\n"
  "0.010000,0.006866,-0.133422,0.007012,0.116142,1.276490,7.892490,6.262458\n"
  "0.010000,0.008163,-0.133451,0.008309,0.129712,1.357028,8.053788,6.258650\n"
  "0.010000,0.009603,-0.133489,0.009750,0.144106,1.439355,8.232770,6.254458\n"
  "0.010000,0.011193,-0.133539,0.011340,0.158981,1.487536,4.818050,6.249882\n"
  "0.010000,0.012931,-0.133601,0.013080,0.173992,1.501100,1.356420,6.244932\n"
  "0.010000,0.014821,-0.133678,0.014972,0.189154,1.516168,1.506756,6.239620\n"
  "0.010000,0.016864,-0.133773,0.017016,0.204480,1.532570,1.640262,6.233956\n"
  "0.010000,0.019061,-0.133888,0.019216,0.219984,1.550407,1.783718,6.227956\n"
  "0.010000,0.021413,-0.134026,0.021573,0.235678,1.569484,1.907708,6.221633\n"
  "0.010000,0.023924,-0.134189,0.024089,0.251582,1.590326,2.084140,6.215002\n"
  "0.010000,0.026594,-0.134380,0.026766,0.267704,1.612229,2.190344,6.208081\n"
  "0.010000,0.029426,-0.134604,0.029606,0.284060,1.635602,2.337303,6.200886\n"
  "0.010000,0.032422,-0.134862,0.032613,0.300665,1.660472,2.486933,6.193437\n"
  "0.010000,0.035583,-0.135159,0.035788,0.317532,1.686737,2.626492,6.185753\n"
  "0.010000,0.038912,-0.135498,0.039135,0.334671,1.713899,2.716253,6.177854\n"
  "0.010000,0.042412,-0.135882,0.042656,0.352097,1.742607,2.870764,6.169763\n"
  "0.010000,0.046085,-0.136316,0.046354,0.369821,1.772370,2.976326,6.161500\n"
  "0.010000,0.049933,-0.136803,0.050233,0.387852,1.803081,3.071056,6.153091\n"
  "0.010000,0.053958,-0.137347,0.054295,0.406204,1.835212,3.213159,6.144557\n"
  "0.010000,0.058164,-0.137953,0.058544,0.424881,1.867745,3.253317,6.135924\n"
  "0.010000,0.062552,-0.138623,0.062983,0.443892,1.901081,3.333556,6.127217\n"
  "0.010000,0.067125,-0.139363,0.067615,0.463245,1.935298,3.421702,6.118462\n"
  "0.010000,0.071885,-0.140176,0.072445,0.482948,1.970324,3.502593,6.109684\n"
  "0.010000,0.076836,-0.141066,0.077475,0.503001,2.005238,3.491432,6.100911\n"
  "0.010000,0.081979,-0.142038,0.082709,0.523411,2.041024,3.578607,6.092168\n"
  "0.010000,0.087317,-0.143094,0.088150,0.544178,2.076716,3.569157,6.083482\n"
  "0.010000,0.092853,-0.144240,0.093804,0.565306,2.112792,3.607662,6.074881\n"
  "0.010000,0.098589,-0.145478,0.099671,0.586794,2.148820,3.602767,6.066392\n"
  "0.010000,0.104527,-0.146812,0.105758,0.608643,2.184836,3.601647,6.058041\n"
  "0.010000,0.110671,-0.148246,0.112066,0.630850,2.220734,3.589740,6.049856\n"
  "0.010000,0.117022,-0.149782,0.118601,0.653418,2.256834,3.610002,6.041864\n"
  "0.010000,0.123583,-0.151424,0.125364,0.676343,2.292454,3.561983,6.034091\n"
  "0.010000,0.130356,-0.153175,0.132360,0.699621,2.327836,3.538270,6.026563\n"
  "0.010000,0.137341,-0.155035,0.139588,0.722815,2.319372,-0.846462,6.019313\n"
  "0.010000,0.144531,-0.157005,0.147043,0.745455,2.264041,-5.533107,6.012373\n"
  "0.010000,0.151919,-0.159082,0.154718,0.767511,2.205596,-5.844437,6.005775\n"
  "0.010000,0.159500,-0.161267,0.162608,0.788953,2.144222,-6.137408,5.999547\n"
  "0.010000,0.167267,-0.163556,0.170705,0.809753,2.079932,-6.429035,5.993717\n"
  "0.010000,0.175214,-0.165947,0.179004,0.829880,2.012765,-6.716740,5.988309\n"
  "0.010000,0.183335,-0.168436,0.187497,0.849300,1.942003,-7.076118,5.983344\n"
  "0.010000,0.191621,-0.171019,0.196177,0.867998,1.869721,-7.228196,5.978845\n"
  "0.010000,0.200068,-0.173691,0.205036,0.885939,1.794158,-7.556352,5.974828\n"
  "0.010000,0.208668,-0.176447,0.214067,0.903102,1.716243,-7.791453,5.971311\n"
  "0.010000,0.217415,-0.179282,0.223262,0.919464,1.636276,-7.996711,5.968309\n"
  "0.010000,0.226302,-0.182189,0.232612,0.935006,1.554161,-8.211538,5.965835\n"
  "0.010000,0.235321,-0.185162,0.242109,0.949706,1.469949,-8.421139,5.963900\n"
  "0.010000,0.244468,-0.188193,0.251745,0.963546,1.384016,-8.593394,5.962517\n"
  "0.010000,0.253734,-0.191275,0.261510,0.976508,1.296258,-8.775752,5.961692\n"
  "0.010000,0.263112,-0.194401,0.271395,0.988576,1.206786,-8.947171,5.961436\n"
  "0.010000,0.272597,-0.197561,0.281393,0.999733,1.115698,-9.108872,5.961753\n"
  "0.010000,0.282181,-0.200748,0.291492,1.009964,1.023053,-9.264416,5.962650\n"
  "0.010000,0.291856,-0.203953,0.301685,1.019251,0.928732,-9.432173,5.964131\n"
  "0.010000,0.301617,-0.207166,0.311961,1.027581,0.833031,-9.570021,5.966200\n"
  "0.010000,0.311459,-0.210381,0.322315,1.035455,0.787393,-4.563887,5.968858\n"
  "0.010000,0.321387,-0.213591,0.332749,1.043396,0.794120,0.672779,5.972113\n"
  "0.010000,0.331403,-0.216791,0.343263,1.051421,0.802506,0.838531,5.975969\n"
  "0.010000,0.341509,-0.219973,0.353859,1.059539,0.811706,0.920016,5.980434\n"
  "0.010000,0.351709,-0.223131,0.364536,1.067770,0.823185,1.147949,5.985516\n"
  "0.010000,0.362006,-0.226258,0.375298,1.076119,0.834877,1.169160,5.991224\n"
  "0.010000,0.372403,-0.229348,0.386144,1.084608,0.848845,1.396764,5.997569\n"
  "0.010000,0.382903,-0.232392,0.397076,1.093238,0.863059,1.421460,6.004561\n"
  "0.010000,0.393509,-0.235383,0.408096,1.102030,0.879193,1.613341,6.012213\n"
  "0.010000,0.404226,-0.238312,0.419206,1.110983,0.895258,1.606573,6.020536\n"
  "0.010000,0.415056,-0.241172,0.430407,1.120116,0.913371,1.811299,6.029543\n"
  "0.010000,0.426002,-0.243954,0.441702,1.129421,0.930494,1.712264,6.039249\n"
  "0.010000,0.437068,-0.246648,0.453091,1.138917,0.949545,1.905058,6.049667\n"
  "0.010000,0.448257,-0.249244,0.464577,1.148592,0.967539,1.799428,6.060810\n"
  "0.010000,0.459571,-0.251732,0.476161,1.158447,0.985515,1.797660,6.072693\n"
  "0.010000,0.471013,-0.254102,0.487846,1.168485,1.003800,1.828502,6.085329\n"
  "0.010000,0.482585,-0.256342,0.499633,1.178685,1.019975,1.617455,6.098729\n"
  "0.010000,0.494289,-0.258441,0.511523,1.189035,1.035035,1.506041,6.112906\n"
  "0.010000,0.506125,-0.260385,0.523518,1.199518,1.048287,1.325196,6.127868\n"
  "0.010000,0.518095,-0.262164,0.535620,1.210111,1.059253,1.096538,6.143626\n"
  "0.010000,0.530197,-0.263763,0.547827,1.220776,1.066505,0.725203,6.160183\n"
  "0.010000,0.542432,-0.265168,0.560142,1.231475,1.069932,0.342769,6.177542\n"
  "0.010000,0.554795,-0.266366,0.572564,1.242164,1.068910,-0.102288,6.195704\n"
  "0.010000,0.567285,-0.267343,0.585092,1.252790,1.062530,-0.637942,6.214662\n"
  "0.010000,0.579896,-0.268084,0.597724,1.263290,1.050046,-1.248375,6.234408\n"
  "0.010000,0.592623,-0.268575,0.610460,1.273597,1.030733,-1.931308,6.254927\n"
  "0.010000,0.605457,-0.268802,0.623297,1.283637,1.003919,-2.681458,6.276199\n"
  "0.010000,0.618385,-0.268751,0.636224,1.292758,0.912182,-9.173630,0.015003\n"
  "0.010000,0.631382,-0.268409,0.649226,1.300208,0.744983,-16.719976,0.037654\n"
  "0.010000,0.644424,-0.267767,0.662284,1.305784,0.557596,-18.738696,0.060901\n"
  "0.010000,0.657483,-0.266815,0.675378,1.309373,0.358893,-19.870304,0.084671\n"
  "0.010000,0.670531,-0.265549,0.688487,1.310871,0.149760,-20.913239,0.108881\n"
  "0.010000,0.683537,-0.263965,0.701589,1.310188,-0.068247,-21.800690,0.133443\n"
  "0.010000,0.696470,-0.262066,0.714661,1.307242,-0.294641,-22.639406,0.158263\n"
  "0.010000,0.709301,-0.259854,0.727681,1.301996,-0.524543,-22.990268,0.183242\n"
  "0.010000,0.721998,-0.257336,0.740625,1.294401,-0.759534,-23.499054,0.208280\n"
  "0.010000,0.734531,-0.254523,0.753470,1.284473,-0.992835,-23.330148,0.233277\n"
  "0.010000,0.746871,-0.251429,0.766192,1.272215,-1.225727,-23.289149,0.258132\n"
  "0.010000,0.758991,-0.248069,0.778769,1.257676,-1.453930,-22.820326,0.282750\n"
  "0.010000,0.770864,-0.244462,0.791178,1.240924,-1.675186,-22.125638,0.307039\n"
  "0.010000,0.782468,-0.240630,0.803398,1.222005,-1.891932,-21.674511,0.330914\n"
  "0.010000,0.793780,-0.236595,0.815409,1.201067,-2.093810,-20.187878,0.354295\n"
  "0.010000,0.804783,-0.232382,0.827190,1.178183,-2.288354,-19.454405,0.377114\n"
  "0.010000,0.815459,-0.228015,0.838725,1.153480,-2.470330,-18.197597,0.399307\n"
  "0.010000,0.825795,-0.223522,0.849996,1.127029,-2.645097,-17.476636,0.420821\n"
  "0.010000,0.835779,-0.218928,0.860986,1.099013,-2.801593,-15.649636,0.441611\n"
  "0.010000,0.845402,-0.214261,0.871681,1.069485,-2.952854,-15.126127,0.461640\n"
  "0.010000,0.854661,-0.209542,0.882072,1.039160,-3.032449,-7.959454,0.480889\n"
  "0.010000,0.863560,-0.204794,0.892160,1.008747,-3.041279,-0.883039,0.499358\n"
  "0.010000,0.872108,-0.200032,0.901944,0.978439,-3.030859,1.042040,0.517053\n"
  "0.010000,0.880311,-0.195275,0.911427,0.948250,-3.018863,1.199613,0.533984\n"
  "0.010000,0.888177,-0.190538,0.920609,0.918264,-2.998588,2.027466,0.550166\n"
  "0.010000,0.895714,-0.185834,0.929493,0.888431,-2.983322,1.526586,0.565611\n"
  "0.010000,0.902931,-0.181178,0.938082,0.858888,-2.954253,2.906932,0.580341\n"
  "0.010000,0.909837,-0.176580,0.946378,0.829589,-2.929983,2.427014,0.594372\n"
  "0.010000,0.916439,-0.172053,0.954384,0.800574,-2.901493,2.848958,0.607726\n"
  "0.010000,0.922747,-0.167606,0.962102,0.771773,-2.880104,2.138951,0.620423\n"
  "0.010000,0.928769,-0.163248,0.969535,0.743316,-2.845710,3.439370,0.632484\n"
  "0.010000,0.934512,-0.158987,0.976686,0.715124,-2.819181,2.652933,0.643931\n"
  "0.010000,0.939986,-0.154832,0.983558,0.687220,-2.790376,2.880470,0.654785\n"
  "0.010000,0.945197,-0.150788,0.990154,0.659553,-2.766694,2.368191,0.665064\n"
  "0.010000,0.950152,-0.146863,0.996476,0.632212,-2.734104,3.259023,0.674791\n"
  "0.010000,0.954859,-0.143061,1.002526,0.605053,-2.715857,1.824711,0.683984\n"
  "0.010000,0.959325,-0.139388,1.008308,0.578202,-2.685113,3.074347,0.692661\n"
  "0.010000,0.963555,-0.135849,1.013824,0.551527,-2.667511,1.760221,0.700840\n"
  "0.010000,0.967555,-0.132447,1.019075,0.525148,-2.637906,2.960547,0.708538\n"
  "0.010000,0.971332,-0.129186,1.024065,0.498940,-2.620803,1.710256,0.715772\n"
  "0.010000,0.974890,-0.126071,1.028794,0.472963,-2.597709,2.309370,0.722557\n"
  "0.010000,0.978235,-0.123103,1.033266,0.447154,-2.580863,1.684628,0.728907\n"
  "0.010000,0.981371,-0.120286,1.037481,0.421531,-2.562377,1.848652,0.734835\n"
  "0.010000,0.984302,-0.117622,1.041442,0.396108,-2.542257,2.011983,0.740354\n"
  "0.010000,0.987033,-0.115114,1.045150,0.370759,-2.534955,0.730200,0.745476\n"
  "0.010000,0.989567,-0.112764,1.048606,0.345645,-2.511368,2.358713,0.750212\n"
  "0.010000,0.991908,-0.110573,1.051813,0.320626,-2.501915,0.945286,0.754571\n"
  "0.010000,0.994058,-0.108543,1.054770,0.295716,-2.491017,1.089730,0.758564\n"
  "0.010000,0.996021,-0.106675,1.057479,0.270929,-2.478668,1.234941,0.762197\n"
  "0.010000,0.997800,-0.104972,1.059942,0.246280,-2.464865,1.380277,0.765480\n"
  "0.010000,0.999400,-0.103430,1.062164,0.222194,-2.408668,5.619716,0.768426\n"
  "0.010000,1.000832,-0.102042,1.064158,0.199396,-2.279788,12.888033,0.771057\n"
  "0.010000,1.002106,-0.100802,1.065936,0.177827,-2.156828,12.295949,0.773393\n"
  "0.010000,1.003232,-0.099700,1.067511,0.157530,-2.029724,12.710379,0.775454\n"
  "0.010000,1.004220,-0.098729,1.068896,0.138505,-1.902474,12.725024,0.777259\n"
  "0.010000,1.005080,-0.097882,1.070103,0.120701,-1.780422,12.205217,0.778828\n"
  "0.010000,1.005821,-0.097150,1.071145,0.104179,-1.652195,12.822691,0.780178\n"
  "0.010000,1.006452,-0.096524,1.072034,0.088913,-1.526571,12.562367,0.781328\n"
  "0.010000,1.006983,-0.095997,1.072782,0.074770,-1.414364,11.220795,0.782293\n"
  "0.010000,1.007422,-0.095560,1.073402,0.061968,-1.280154,13.420934,0.783092\n"
  "0.010000,1.007779,-0.095205,1.073905,0.050312,-1.165583,11.457123,0.783739\n"
  "0.010000,1.008061,-0.094924,1.074304,0.039879,-1.043354,12.222912,0.784252\n"
  "0.010000,1.008278,-0.094707,1.074610,0.030690,-0.918939,12.441507,0.784646\n"
  "0.010000,1.008439,-0.094546,1.074837,0.022701,-0.798896,12.004280,0.784938\n"
  "0.010000,1.008551,-0.094434,1.074997,0.015915,-0.678600,12.029587,0.785142\n"
  "0.010000,1.008624,-0.094361,1.075100,0.010333,-0.558121,12.047918,0.785274\n"
  "0.010000,1.008667,-0.094319,1.075159,0.005958,-0.437517,12.060391,0.785351\n"
  "0.010000,1.008686,-0.094299,1.075187,0.002790,-0.316836,12.068135,0.785387\n"
  "0.010000,1.008692,-0.094293,1.075196,0.000829,-0.196113,12.072291,0.785397\n"
  "0.010000,1.008693,-0.094293,1.075196,0.000075,-0.075373,12.074006,0.785398\n"
  "0.010000,1.008693,-0.094293,1.075196,0.000000,-0.007500,6.787230,0.785398\n";
};

TEST_F(AsyncMotionProfileControllerTest, ConstructWithGearRatioOf0) {
  EXPECT_THROW(
    AsyncMotionProfileController(
      createTimeUtil(), {}, nullptr, {{2_in, 8_in}, 360}, AbstractMotor::gearset::green * 0),
    std::invalid_argument);
}

TEST_F(AsyncMotionProfileControllerTest, SettledWhenDisabled) {
  assertControllerIsSettledWhenDisabled(*controller, std::string("A"));
}

TEST_F(AsyncMotionProfileControllerTest, WaitUntilSettledWorksWhenDisabled) {
  assertWaitUntilSettledWorksWhenDisabled(*controller);
}

TEST_F(AsyncMotionProfileControllerTest, MotorsAreStoppedAfterSettling) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 45_deg}},
                           "A");

  EXPECT_EQ(controller->getPaths().front(), "A");
  EXPECT_EQ(controller->getPaths().size(), 1);

  controller->setTarget("A");

  EXPECT_EQ(controller->getTarget(), "A");

  controller->waitUntilSettled();

  assertMotorsHaveBeenStopped(leftMotor.get(), rightMotor.get());
  EXPECT_GT(leftMotor->maxVelocity, 0);
  EXPECT_GT(rightMotor->maxVelocity, 0);
}

TEST_F(AsyncMotionProfileControllerTest, FollowPathWithMoveTo) {
  controller->moveTo({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 0_deg}});

  assertMotorsHaveBeenStopped(leftMotor.get(), rightMotor.get());
  EXPECT_GT(leftMotor->maxVelocity, 0);
  EXPECT_GT(rightMotor->maxVelocity, 0);
}

TEST_F(AsyncMotionProfileControllerTest, WrongPathNameDoesNotMoveAnything) {
  controller->setTarget("A");
  controller->waitUntilSettled();

  EXPECT_EQ(leftMotor->maxVelocity, 0);
  EXPECT_EQ(rightMotor->maxVelocity, 0);
}

TEST_F(AsyncMotionProfileControllerTest, TwoPathsOverwriteEachOther) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 45_deg}},
                           "A");
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 2_ft, 45_deg}},
                           "A");

  EXPECT_EQ(controller->getPaths().front(), "A");
  EXPECT_EQ(controller->getPaths().size(), 1);

  controller->setTarget("A");
  controller->waitUntilSettled();
  assertMotorsHaveBeenStopped(leftMotor.get(), rightMotor.get());
  EXPECT_GT(leftMotor->maxVelocity, 0);
  EXPECT_GT(rightMotor->maxVelocity, 0);
}

TEST_F(AsyncMotionProfileControllerTest, ImpossiblePathThrowsException) {
  EXPECT_THROW(controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg},
                                         PathfinderPoint{1_in, 1_in, 180_deg},
                                         PathfinderPoint{3_ft, 0_m, 0_deg},
                                         PathfinderPoint{3_ft, 1_in, 0_deg},
                                         PathfinderPoint{3_ft, 1_in, 0_deg},
                                         PathfinderPoint{1_ft, 1_in, 0_deg},
                                         PathfinderPoint{1_ft, 0_ft, 0_deg}},
                                        "A"),
               std::runtime_error);
  EXPECT_EQ(controller->getPaths().size(), 0);
}

TEST_F(AsyncMotionProfileControllerTest, ZeroWaypointsDoesNothing) {
  controller->generatePath({}, "A");
  EXPECT_EQ(controller->getPaths().size(), 0);
}

TEST_F(AsyncMotionProfileControllerTest, RemoveAPath) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 45_deg}},
                           "A");

  EXPECT_EQ(controller->getPaths().front(), "A");
  EXPECT_EQ(controller->getPaths().size(), 1);

  EXPECT_TRUE(controller->removePath("A"));

  EXPECT_EQ(controller->getPaths().size(), 0);
}

TEST_F(AsyncMotionProfileControllerTest, RemoveRunningPath) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 45_deg}},
                           "A");

  EXPECT_EQ(controller->getPaths().front(), "A");
  EXPECT_EQ(controller->getPaths().size(), 1);

  controller->setTarget("A");

  EXPECT_FALSE(controller->removePath("A"));

  EXPECT_EQ(controller->getPaths().size(), 1);
}

TEST_F(AsyncMotionProfileControllerTest, ReplaceRunningPath) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 45_deg}},
                           "A");

  controller->setTarget("A");
  controller->flipDisable(false);

  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 3_ft, 45_deg}},
                           "A");
  EXPECT_EQ(controller->isDisabled(), true);

  EXPECT_EQ(controller->getPaths().size(), 1);
}

TEST_F(AsyncMotionProfileControllerTest, RemoveAPathWhichDoesNotExist) {
  EXPECT_EQ(controller->getPaths().size(), 0);

  EXPECT_TRUE(controller->removePath("A"));

  EXPECT_EQ(controller->getPaths().size(), 0);
}

TEST_F(AsyncMotionProfileControllerTest, ControllerSetChangesTarget) {
  controller->controllerSet("A");
  EXPECT_EQ(controller->getTarget(), "A");
}

TEST_F(AsyncMotionProfileControllerTest, ResetStopsMotors) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 45_deg}},
                           "A");
  controller->setTarget("A");

  auto rate = createTimeUtil().getRate();
  while (!controller->executeSinglePathCalled) {
    rate->delayUntil(1_ms);
  }

  // Wait a little longer so we get into the path
  rate->delayUntil(200_ms);
  EXPECT_GT(leftMotor->maxVelocity, 0);
  EXPECT_GT(rightMotor->maxVelocity, 0);

  controller->reset();
  EXPECT_FALSE(controller->isDisabled());
  EXPECT_TRUE(controller->isSettled());
  EXPECT_EQ(leftMotor->lastVelocity, 0);
  EXPECT_EQ(rightMotor->lastVelocity, 0);
}

TEST_F(AsyncMotionProfileControllerTest, DisabledStopsMotors) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 45_deg}},
                           "A");
  controller->setTarget("A");

  auto rate = createTimeUtil().getRate();
  while (!controller->executeSinglePathCalled) {
    rate->delayUntil(1_ms);
  }

  // Wait a little longer so we get into the path
  rate->delayUntil(200_ms);
  EXPECT_GT(leftMotor->maxVelocity, 0);
  EXPECT_GT(rightMotor->maxVelocity, 0);

  controller->flipDisable(true);

  // Wait a bit because the loop() thread is what cleans up
  rate->delayUntil(10_ms);

  EXPECT_TRUE(controller->isDisabled());
  EXPECT_TRUE(controller->isSettled());
  EXPECT_EQ(leftMotor->lastVelocity, 0);
  EXPECT_EQ(rightMotor->lastVelocity, 0);
}

TEST_F(AsyncMotionProfileControllerTest, SpeedConversionTest) {
  // 4 inch wheels, 2 wheel rotations per 1 motor rotation
  EXPECT_NEAR(controller->convertLinearToRotational(1_mps).convert(rpm), 93.989, 0.001);
}

TEST_F(AsyncMotionProfileControllerTest, FollowPathBackwards) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{3_ft, 0_m, 0_deg}},
                           "A");
  controller->setTarget("A", true);

  auto rate = createTimeUtil().getRate();
  while (!controller->executeSinglePathCalled) {
    rate->delayUntil(1_ms);
  }

  // Wait a little longer so we get into the path
  rate->delayUntil(200_ms);

  EXPECT_LT(leftMotor->lastVelocity, 0);
  EXPECT_LT(rightMotor->lastVelocity, 0);

  // Disable the controller so gtest doesn't clean up the test fixture while the internal thread is
  // still running
  controller->flipDisable(true);
}

TEST_F(AsyncMotionProfileControllerTest, FollowPathNotMirrored) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{1_ft, 1_ft, 0_deg}},
                           "A");
  controller->setTarget("A");

  auto rate = createTimeUtil().getRate();
  while (!controller->executeSinglePathCalled) {
    rate->delayUntil(1_ms);
  }

  // Wait a little longer so we get into the path
  rate->delayUntil(200_ms);

  EXPECT_NE(leftMotor->lastVelocity, 0);
  EXPECT_NE(rightMotor->lastVelocity, 0);
  EXPECT_GT(rightMotor->maxVelocity, leftMotor->maxVelocity);

  // Disable the controller so gtest doesn't clean up the test fixture while the internal thread is
  // still running
  controller->flipDisable(true);
}

TEST_F(AsyncMotionProfileControllerTest, FollowPathMirrored) {
  controller->generatePath({PathfinderPoint{0_m, 0_m, 0_deg}, PathfinderPoint{1_ft, 1_ft, 0_deg}},
                           "A");
  controller->setTarget("A", false, true);

  auto rate = createTimeUtil().getRate();
  while (!controller->executeSinglePathCalled) {
    rate->delayUntil(1_ms);
  }

  // Wait a little longer so we get into the path
  rate->delayUntil(200_ms);

  EXPECT_NE(leftMotor->lastVelocity, 0);
  EXPECT_NE(rightMotor->lastVelocity, 0);
  EXPECT_GT(leftMotor->maxVelocity, rightMotor->maxVelocity);

  // Disable the controller so gtest doesn't clean up the test fixture while the internal thread is
  // still running
  controller->flipDisable(true);
}

TEST_F(AsyncMotionProfileControllerTest, FilePathJoin) {
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("/usd/", "test").c_str(),
               "/usd/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("usd/", "test").c_str(), "/usd/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("/usd", "test").c_str(), "/usd/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("usd", "test").c_str(), "/usd/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("", "test").c_str(), "/usd/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("/", "test").c_str(), "/usd/test");

  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("/usd/subdir", "test").c_str(),
               "/usd/subdir/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("usd/subdir", "test").c_str(),
               "/usd/subdir/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("/usd/subdir/", "test").c_str(),
               "/usd/subdir/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("usd/subdir/", "test").c_str(),
               "/usd/subdir/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("subdir", "test").c_str(),
               "/usd/subdir/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("subdir/", "test").c_str(),
               "/usd/subdir/test");
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("/subdir/", "test").c_str(),
               "/usd/subdir/test");
}

TEST_F(AsyncMotionProfileControllerTest, FilePathRestrict) {
  EXPECT_STREQ(MockAsyncMotionProfileController::makeFilePath("", "t>e<s\"t\\F:i*l|e/").c_str(),
               "/usd/testFile");
}

TEST_F(AsyncMotionProfileControllerTest, SaveLoadPath) {
  controller->generatePath(
    {PathfinderPoint{0_in, 0_in, 0_deg}, PathfinderPoint{3_ft, 0_in, 45_deg}}, "A");
  controller->internalStorePath(squigglesPathFile, "A");

  int genPathLen = controller->getPathData("A").size();

  controller->removePath("A");
  controller->internalLoadPath(squigglesPathFile, "A");
  EXPECT_EQ(controller->getPaths().front(), "A");
  EXPECT_EQ(controller->getPaths().size(), 1);
  EXPECT_EQ(controller->getPathData("A").size(), genPathLen);

  controller->setTarget("A");
  EXPECT_EQ(controller->getTarget(), "A");
}

TEST_F(AsyncMotionProfileControllerTest, LoadPathfinderPath) {
  controller->removePath("A");
  controller->internalLoadPathfinderPath(leftPathFile, rightPathFile, "A");
  EXPECT_EQ(controller->getPaths().front(), "A");
  EXPECT_EQ(controller->getPaths().size(), 1);
  int numLines = 0;
  std::string buf;
  leftPathFile.clear();
  leftPathFile.seekg(0);
  while (!leftPathFile.eof()) {
    std::getline(leftPathFile, buf);
    numLines++;
  }
  EXPECT_EQ(controller->getPathData("A").size(), numLines - 2);

  controller->setTarget("A");
  EXPECT_EQ(controller->getTarget(), "A");
}